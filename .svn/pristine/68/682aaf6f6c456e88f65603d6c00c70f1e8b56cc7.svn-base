package edu.gmu.teemw.ui;

import javax.swing.JDialog;
import javax.swing.JButton;

import java.awt.BorderLayout;

import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JSeparator;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;

import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.Box;
import javax.swing.JRadioButton;
import javax.swing.GroupLayout;
import javax.swing.ListSelectionModel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.event.TableModelListener;

import edu.gmu.teemw.SystemMain;
import edu.gmu.teemw.database.Database;
import edu.gmu.teemw.database.Grade;
import edu.gmu.teemw.database.User;
import edu.gmu.teemw.database.quiz.Question;
import edu.gmu.teemw.database.quiz.QuestionShortAnswer;
import edu.gmu.teemw.database.quiz.Quiz;
import edu.gmu.teemw.ui.GradeFrame.GradeModel;
//import edu.gmu.teemw.ui.GradeFrame.TeacherState;
//import edu.gmu.teemw.ui.GradeFrame.TeacherState;

public class CreateQuestion extends JDialog implements ActionListener {
	private JTextField txtQuestion;
	String questionString;
	private JTextField txtAnswerChoice;
	private JTextField txtShortAnswer;
	private JTextField txtQuestionCode;
	private JTextField txtQuestionCode1;
	private JTextField txtQuestionCode2;
	private JTextField txtCodeAnswer1;
	private JTextField txtAnswerChoice1;
	private JTextField txtAnswerChoice2;
	private JTextField txtAnswerChoice3;
	
	private String answerString;


	JPanel panelAnswerMultipleChoice;
	JPanel panelAnswerShort;
	JPanel panelAnswerCode;
	JPanel panelType;
	JPanel panelQuestion;
	JPanel panelQuestionCode;
	JPanel panelAnswer;
	JPanel panelQuiz;
	private Panel menuPane;
	JPanel panel_in;

	private JLabel lblTitle;
	private Component separator;

	ButtonGroup groupType;
	ButtonGroup groupType1;
	JButton btnPrevButton;
	JButton btnNextButton;
	JButton btnNextButton1;
	JButton btnNewButton_2; 
	JButton btnAddQuiz;

	GradeModel tableModel;

	JTable table;
	private Set<Quiz> quizzes;

	Box horizontalBox; 



	JRadioButton rdbtnType[] = new JRadioButton[3];
	JRadioButton rdbtnType1[] = new JRadioButton[4];

	int questionType = 0;

	static enum STATE {TYPE, QUESTION, ANSWER, QUIZ};
	STATE current = STATE.TYPE;
	List<Integer> quizIDList = new ArrayList<>();

	public CreateQuestion() {
		getContentPane().setLayout(new BorderLayout(5, 5));
		setBounds(100, 100, 500, 400);
		JPanel panelMenu = new JPanel();
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		getContentPane().add(panelMenu, BorderLayout.NORTH);
		panelMenu.setLayout(new BoxLayout(panelMenu, BoxLayout.X_AXIS));

		btnPrevButton = new JButton("Back");
		panelMenu.add(btnPrevButton);
		btnPrevButton.addActionListener(this);

		Component horizontalGlue = Box.createHorizontalGlue();
		panelMenu.add(horizontalGlue);

		btnNextButton = new JButton("Next");
		panelMenu.add(btnNextButton);
		btnNextButton.addActionListener(this);

		JPanel panelMain = new JPanel();
		getContentPane().add(panelMain, BorderLayout.CENTER);
		panelMain.setLayout(new BoxLayout(panelMain, BoxLayout.X_AXIS));

		//quiz panel

		panelQuiz = new JPanel();
		panelMain.add(panelQuiz);
		panelQuiz.setLayout(new BoxLayout(panelQuiz, BoxLayout.Y_AXIS));
		menuPane = new Panel();
		panelQuiz.add(menuPane);
		menuPane.setLayout(new BoxLayout(menuPane, BoxLayout.X_AXIS));
		menuPane.add(Box.createHorizontalGlue());
		lblTitle = new JLabel("Quizzes");
		menuPane.add(lblTitle);
		menuPane.add(Box.createHorizontalGlue());
		btnAddQuiz = new JButton("New Quiz");
		menuPane.add(btnAddQuiz);
		btnAddQuiz.addActionListener(this);

		quizzes = Database.getDatabaseInstance().getQuizzes();
		table = new JTable();
		//menuPane.add(table);
		table.setAutoCreateColumnsFromModel(true);
		tableModel = new GradeModel();
		table.setModel(tableModel);
		//scrollPane.setViewportView(table);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		JScrollPane scrollPane= new JScrollPane();
		panelQuiz.add(scrollPane);
		scrollPane.setViewportView(table);
		panelQuiz.setVisible(false);

		//short answer panel

		panelAnswerShort = new JPanel();
		panelMain.add(panelAnswerShort);
		JLabel lblShortAnswer = new JLabel("Short Answer:");
		panelAnswerShort.add(lblShortAnswer);
		panelAnswerShort.setVisible(false);
		txtShortAnswer = new JTextField();
		panelAnswerShort.add(txtShortAnswer);
		txtShortAnswer.setColumns(30);
		panelAnswerShort.setVisible(false);


		//code answer panel
		panelAnswerCode = new JPanel();
		panelMain.add(panelAnswerCode);
		JLabel lblCodeAnswer = new JLabel("Code Answer:");
		JLabel lblCodeAnswer1 = new JLabel("Input:");
		
		panelAnswerCode.add(lblCodeAnswer);
		
		
		panelAnswerCode.setVisible(false);
		
		txtCodeAnswer1 = new JTextField();
		
		panelAnswerCode.add(lblCodeAnswer1);
		panelAnswerCode.add(txtCodeAnswer1);
		
		
		txtCodeAnswer1.setColumns(30);
		panelAnswerCode.setVisible(false);




		/* Multiple Choice Answers */
		panelAnswerMultipleChoice = new JPanel();
		panel_in = new JPanel();
		panelAnswerMultipleChoice.setAlignmentY(Component.TOP_ALIGNMENT);
		panelMain.add(panelAnswerMultipleChoice);
		panelAnswerMultipleChoice.setLayout(new BorderLayout(0, 0));
		panelAnswerMultipleChoice.add(panel_in, BorderLayout.NORTH);

		Box horizontalBox = Box.createHorizontalBox();
		Box horizontalBox1 = Box.createHorizontalBox();
		Box horizontalBox2 = Box.createHorizontalBox();
		Box horizontalBox3 = Box.createHorizontalBox();



		panel_in.setLayout(new BoxLayout(panel_in, BoxLayout.Y_AXIS));


		panel_in.add(horizontalBox);
		rdbtnType1[0] = new JRadioButton("");
		horizontalBox.add(rdbtnType1[0]);
		txtAnswerChoice = new JTextField();
		horizontalBox.add(txtAnswerChoice);
		txtAnswerChoice.setColumns(10);

		panel_in.add(horizontalBox1);
		rdbtnType1[1] = new JRadioButton("");
		horizontalBox1.add(rdbtnType1[1]);
		txtAnswerChoice1 = new JTextField();
		horizontalBox1.add(txtAnswerChoice1);
		txtAnswerChoice1.setColumns(10);

		panel_in.add(horizontalBox2);
		rdbtnType1[2] = new JRadioButton("");
		horizontalBox2.add(rdbtnType1[2]);
		txtAnswerChoice2 = new JTextField();
		horizontalBox2.add(txtAnswerChoice2);
		txtAnswerChoice2.setColumns(10);

		panel_in.add(horizontalBox3);
		rdbtnType1[3] = new JRadioButton("");
		horizontalBox3.add(rdbtnType1[3]);
		txtAnswerChoice3 = new JTextField();
		horizontalBox3.add(txtAnswerChoice3);
		txtAnswerChoice3.setColumns(10);

		groupType1 = new ButtonGroup();
		groupType1.add(rdbtnType1[0]);
		groupType1.add(rdbtnType1[1]);
		groupType1.add(rdbtnType1[2]);
		groupType1.add(rdbtnType1[3]);
		panelAnswerMultipleChoice.setVisible(false);

		//btnNewButton_2= new JButton("Add choice");
		//btnNewButton_2.addActionListener(this);

		//panelAnswerMultipleChoice.add(btnNewButton_2, BorderLayout.SOUTH);




		/* TYPE PANEL */
		panelType = new JPanel();
		panelMain.add(panelType);

		rdbtnType[0] = new JRadioButton("Code");
		panelType.add(rdbtnType[0]);

		rdbtnType[1] = new JRadioButton("Multiple Choice");
		panelType.add(rdbtnType[1]);

		rdbtnType[2] = new JRadioButton("Short Answer");
		panelType.add(rdbtnType[2]);

		groupType = new ButtonGroup();
		groupType.add(rdbtnType[0]);
		groupType.add(rdbtnType[1]);
		groupType.add(rdbtnType[2]);

		//code question
		
		panelQuestionCode = new JPanel();
		panelMain.add(panelQuestionCode);
		
		JLabel lblQuestions2 = new JLabel("Question:");
		panelQuestionCode.add(lblQuestions2);
		panelQuestionCode.setVisible(false);

		txtQuestionCode = new JTextField();
		panelQuestionCode.add(txtQuestionCode);
		txtQuestionCode.setColumns(30);
		
		JLabel lblQuestions3 = new JLabel("Sample Input:");
		panelQuestionCode.add(lblQuestions3);
		panelQuestionCode.setVisible(false);

		txtQuestionCode1 = new JTextField();
		panelQuestionCode.add(txtQuestionCode1);
		txtQuestionCode1.setColumns(30);
		
		JLabel lblQuestions4 = new JLabel("Sample Output:");
		panelQuestionCode.add(lblQuestions4);
		panelQuestionCode.setVisible(false);

		txtQuestionCode2 = new JTextField();
		panelQuestionCode.add(txtQuestionCode2);
		txtQuestionCode2.setColumns(30);
		
		
		
		//panelQuestion.setVisible(false);
		
		/* QUESTION PANEL */
		panelQuestion = new JPanel();
		panelMain.add(panelQuestion);

		JLabel lblQuestions = new JLabel("Questions:");
		panelQuestion.add(lblQuestions);
		panelQuestion.setVisible(false);

		txtQuestion = new JTextField();
		panelQuestion.add(txtQuestion);
		txtQuestion.setColumns(30);
		panelQuestion.setVisible(false);


	}

	class GradeModel extends DefaultTableModel {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		int rows, cols;

		Dictionary<Integer, Integer> quizTable;
		//<User, Dictionary<Quiz, Grade>>
		//<Quiz, Grade>

		List<String> columnNames = new ArrayList<>();
		Dictionary<Integer, String> quizNameTable = new Hashtable<>();


		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			int quizID = quizIDList.get(rowIndex);
			if (columnIndex == 0) {
				return quizNameTable.get(quizID);
			}
			return null;
		}
		
		GradeModel() {
			rows = quizzes.size();

			// Setup quiz table
			for (Quiz quiz : quizzes) {
				quizNameTable.put(quiz.getQuizID(), quiz.getQuizName());
			}

			// Setup quizIDList
			quizIDList = Collections.list(quizNameTable.keys());
			Collections.sort(quizIDList);

		}
		@Override
		public int getRowCount() {
			return quizzes.size();
		}
		@Override
		public int getColumnCount() {
			return 1;
		}
		@Override
		public String getColumnName(int columnIndex) {
			return "Quiz";
		}
		@Override
		public Class<?> getColumnClass(int columnIndex) {
			return String.class;
		}
		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			return false;
		}
		@Override
		public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
			
		}
		@Override
		public void addTableModelListener(TableModelListener l) {
			
		}
		@Override
		public void removeTableModelListener(TableModelListener l) {
			
		}

	}

	
	


	@Override
	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		if (source == btnNextButton) {
			if (current == STATE.TYPE) {
				questionType = -1;
				for (int i = 0; i < rdbtnType.length; i++) {
					JRadioButton button = rdbtnType[i];
					if (button.isSelected()) {
						questionType = i;
						break;
					}
				}
				if (questionType < 0) {
					JOptionPane.showConfirmDialog(this, "Please select a question type!");
					return;
				}

				current = STATE.QUESTION;
				panelType.setVisible(false);
				if(questionType == 0){
					panelQuestionCode.setVisible(true);
				}
				else{
				panelQuestion.setVisible(true);
				}

			}
			else if(current == STATE.QUESTION){
				//TODO fix for code question (won't move on even if there is a question entered)
				questionString = txtQuestion.getText();
				if (questionString.trim().equals("")) {
					JOptionPane.showConfirmDialog(this, "Please enter a question!");
					return;
				}
				if(questionType == 0){
					current = STATE.ANSWER;
					panelQuestion.setVisible(false);
					panelAnswerCode.setVisible(true);
				}
				else if(questionType == 1){
					current = STATE.ANSWER;
					panelQuestion.setVisible(false);
					panelAnswerMultipleChoice.setVisible(true);
					//panel_in.setVisible(true);

				}
				else if(questionType == 2){
					current = STATE.ANSWER;
					panelQuestion.setVisible(false);
					panelAnswerShort.setVisible(true);
				}
			}
			else if(current == STATE.ANSWER){

				if(questionType ==1){

					int x = 0;
					for (int i = 0; i < rdbtnType1.length; i++) {
						JRadioButton button = rdbtnType1[i];
						if (button.isSelected()) {
							x++;
						}
					}
					if(x < 1){
						JOptionPane.showConfirmDialog(this, "Please select a correct answer!");
						return;
					}
					else{
						current = STATE.QUIZ;

						panelAnswerMultipleChoice.setVisible(false);
						panelQuiz.setVisible(true);
						
					}

				}

				else{
					if (questionType == 2) {
						answerString = txtShortAnswer.getText();
					} else if (questionType == 0) {
						answerString = txtCodeAnswer1.getText();
					}
					if (answerString.trim().equals("")) {
						JOptionPane.showConfirmDialog(this, "Please enter a correct answer!");
						return; // leave this state changing
					}
					current = STATE.QUIZ;
					panelAnswerCode.setVisible(false);
					panelAnswerShort.setVisible(false);
					panelQuiz.setVisible(true);
				}

			} else if (current == STATE.QUIZ) {
				int quizID = quizIDList.get(table.getSelectedRow());
				int type = questionType;
				String question = questionString;
				Question newQuestion = null;
				switch (type) {
				case 0: // code
						//TODO add code question/input to database
					break;
				case 1: // multiple choice
					//TODO finish adding multiple choice question
					break;
				case 2: // short answer
					String answer = answerString;
					if (question.trim().equals("")) return;
					if (answer.trim().equals("")) return;
					newQuestion = new QuestionShortAnswer(0, question, answer);
					Database.getDatabaseInstance().addQuestion(newQuestion, quizID);
					break;
				}
			}




		} else if (source == btnPrevButton) {
			if (current == STATE.QUESTION) {
				current = STATE.TYPE;
				
				panelQuestion.setVisible(false);
				panelQuestionCode.setVisible(false);
				panelType.setVisible(true);

			}
			else if(current == STATE.ANSWER){
				current = STATE.QUESTION;
				panelAnswerCode.setVisible(false);
				panelAnswerMultipleChoice.setVisible(false);
				panelAnswerShort.setVisible(false);
				if(questionType ==0){
					panelQuestionCode.setVisible(true);
				}
				else{
				panelQuestion.setVisible(true);
				}
			}
			else if(current == STATE.QUIZ){
				current = STATE.ANSWER;
				if(questionType == 0){
					panelQuiz.setVisible(false);
					panelAnswerCode.setVisible(true);

				}
				else if(questionType ==1){
					panelQuiz.setVisible(false);
					panelAnswerMultipleChoice.setVisible(true);

				}
				else if(questionType ==2){
					panelQuiz.setVisible(false);
					panelAnswerShort.setVisible(true);

				}
			}
		} else if (source == btnAddQuiz) {
			String quizName = JOptionPane.showInputDialog(null, "New Quiz Title", "What should the title of the new quiz be?", JOptionPane.QUESTION_MESSAGE);
			Database.getDatabaseInstance().addQuiz(quizName);
			quizzes = Database.getDatabaseInstance().getQuizzes();
			table.setModel(new GradeModel());
			table.updateUI();
			this.dispose();
		}
		//else if(source == btnNewButton_2){



		//}

	}




}

