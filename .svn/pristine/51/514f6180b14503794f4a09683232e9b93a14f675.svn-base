package edu.gmu.teemw.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Dictionary;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.function.Predicate;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JScrollPane;

import edu.gmu.teemw.SystemMain;
import edu.gmu.teemw.database.Database;
import edu.gmu.teemw.database.Grade;
import edu.gmu.teemw.database.User;
import edu.gmu.teemw.database.quiz.Question;
import edu.gmu.teemw.database.quiz.Question.TYPE;
import edu.gmu.teemw.database.quiz.QuestionCode;
import edu.gmu.teemw.database.quiz.QuestionMultipleChoice;
import edu.gmu.teemw.database.quiz.QuestionShortAnswer;
import edu.gmu.teemw.database.quiz.Quiz;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

import java.awt.Panel;

import javax.swing.SwingConstants;
import javax.swing.JSeparator;
import javax.swing.JLabel;

public class QuizFrame extends JDialog implements MouseListener, ActionListener {
	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JPanel quizPanel;
	private JPanel MCPanel;
	private JPanel CodePanel;
	private JPanel ShortPanel;
	private JTable table;
	private Panel menuPane;
	private JSeparator separator;

	private Set<Quiz> quizzes;
	private Set<Grade> grades;
	private Set<User> users;

	private enum QuizState {QUIZ, INQUIZ, MULTCHOICE, SHORTANSWER, CODE};
	private QuizState quizState = QuizState.QUIZ;
	private String userChoice, answer;
	
	private QuizModel tableModel;
	private int selectedUserQuiz = 0;
	private JLabel lblTitle;
	private JSeparator separator_1;
	private JButton btnRight;
	/**
	 * Create the frame.
	 */
	public QuizFrame() {
		setTitle("Quizzes");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 400, 500);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));

		menuPane = new Panel();
		menuPane.setVisible(false);
		contentPane.add(menuPane);
		menuPane.setLayout(new BoxLayout(menuPane, BoxLayout.X_AXIS));
		
		btnRight = new JButton("Select Quiz");
		btnRight.setHorizontalAlignment(SwingConstants.RIGHT);
		btnRight.setVisible(true);
		btnRight.addActionListener(this);
		menuPane.add(btnRight);
		
		JScrollPane scrollPane = new JScrollPane();
		contentPane.add(scrollPane);

		quizzes = Database.getDatabaseInstance().getQuizzes();
		grades = Database.getDatabaseInstance().getGrades();
		users = Database.getDatabaseInstance().getUsers();
		if (!SystemMain.currentUser.isTeacher()) {
			Predicate<Grade> notCurrentUser = p -> (p.getUserID() != SystemMain.currentUser.getUserID());
			grades.removeIf(notCurrentUser);
		}

		table = new JTable();
		table.setAutoCreateColumnsFromModel(true);
		tableModel = new QuizModel();
		table.setModel(tableModel);
		scrollPane.setViewportView(table);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	}

	class QuizModel extends DefaultTableModel {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		int rows, cols;
		Dictionary<Integer, Integer> studentTable;
		Dictionary<Integer, Integer> quizTable;
		//<User, Dictionary<Quiz, Grade>>
		//<Quiz, Grade>

		List<String> columnNames = new ArrayList<>();
		Dictionary<Integer, String> quizNameTable = new Hashtable<>();
		Dictionary<Integer, String> userTable = new Hashtable<>();

		List<Integer> quizIDList = new ArrayList<>();
		List<Integer> userIDList = new ArrayList<>();
		List<String> choiceList = new ArrayList<>();

		QuizModel() {
			rows = quizzes.size();

			// Setup quiz table
			for (Quiz quiz : quizzes) {
				quizNameTable.put(quiz.getQuizID(), quiz.getQuizName());
			}
			// Setup quizIDList
			quizIDList = Collections.list(quizNameTable.keys());
			Collections.sort(quizIDList);

			// Prepare column headers
			columnNames.add("Quiz");
			cols = 1;
			
			menuPane.setVisible(true);
			btnRight.setText("Select Quiz");
			btnRight.setVisible(true);
		}

		@Override
		public int getRowCount() {
			// TODO Auto-generated method stub
			return rows;
		}

		@Override
		public int getColumnCount() {
			// TODO Auto-generated method stub
			return cols;
		}

		@Override
		public String getColumnName(int columnIndex) {
			// TODO Auto-generated method stub
			return columnNames.get(columnIndex);
		}

		@Override
		public Class<?> getColumnClass(int columnIndex) {
			// TODO Auto-generated method stub
			return String.class;
		}

		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			if(quizState == QuizState.QUIZ){
				int quizID = quizIDList.get(rowIndex);
				return quizNameTable.get(quizID);
			}else if (quizState == QuizState.MULTCHOICE){
				String userChoice = choiceList.get(rowIndex-1);
				return userChoice;
			}
			return null;
		}

		@Override
		public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
			// TODO Auto-generated method stub

		}

		@Override
		public void addTableModelListener(TableModelListener l) {
			// TODO Auto-generated method stub

		}

		@Override
		public void removeTableModelListener(TableModelListener l) {
			// TODO Auto-generated method stub

		}

	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		int row = table.rowAtPoint(e.getPoint());
		int col = table.columnAtPoint(e.getPoint());
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		Object source = e.getSource();
		if (source == btnRight) {
			if (table.getSelectedRow() < 0 || table.getSelectedRow() >= tableModel.rows)
				return;
			if (quizState == QuizState.QUIZ) {
				//looking at the list of quizzes
				
				tableModel.quizTable = new Hashtable<>();
				Set<Grade> gradeList = new HashSet<>(grades);
				int quizID = tableModel.quizIDList.get(table.getSelectedRow());
				selectedUserQuiz = quizID;
				//get the selected quizID
				
				Set<Question> questionSet = Database.getDatabaseInstance().getQuestions(quizID);
				List <Question> questionList= new ArrayList<Question>(questionSet.size());
				for(Question quest : questionSet) questionList.add(quest);
				Collections.shuffle(questionList);
				//get questions for selected quizID
				
				int score = 0;
				for(Question quest : questionList){
					TYPE questionType = quest.getQuestionType();
					if (questionType == TYPE.Code){
						answer = (String)JOptionPane.showInputDialog(null,quest.getQuestionText(),"Code Question",JOptionPane.PLAIN_MESSAGE);
						if(quest.validateAnswer(answer)){
							score++;
						}
					}else if(questionType == TYPE.MultipleChoice){
						Object[] possibilities = new Object[((QuestionMultipleChoice)quest).getChoices().size()];
						((QuestionMultipleChoice)quest).getChoices().toArray(possibilities);
						answer = (String)JOptionPane.showInputDialog(null,quest.getQuestionText(),"Multiple Choice Question",JOptionPane.PLAIN_MESSAGE,null,possibilities,null);
						if (quest.validateAnswer(answer)){
							score++;
						}
					}else if(questionType == TYPE.ShortAnswer){
						answer = (String)JOptionPane.showInputDialog(null,quest.getQuestionText(),"Short Answer Question",JOptionPane.PLAIN_MESSAGE);
						if(quest.validateAnswer(answer)){
							score++;
						}
					}
				}
				score = score/questionList.size();
				JOptionPane.showMessageDialog(null,"Grade: "+score+" %","Quiz Score",JOptionPane.PLAIN_MESSAGE);
				Grade newgrade = new Grade(SystemMain.currentUser.getUserID(), quizID, score);
				Database.getDatabaseInstance().setGrade(newgrade);
				grades = Database.getDatabaseInstance().getGrades();
				tableModel.quizTable.put(quizID, score);
				table.updateUI();
			}
		}

	}

}
